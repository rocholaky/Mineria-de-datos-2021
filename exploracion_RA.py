# -*- coding: utf-8 -*-
"""Prueba_visualización_mineria_de_datos_para_subir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RdtOsR9dGQpCIZhRHBtZ995YRVI_hLDz
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller

# Funcion que permite la obtención de los casos totales incrementales de la pandemia: 
date = '2020-03-30'

#Obtención de casos totales en una región dada una fecha: 
def get_Casos_Totales_Region_on_date(date):
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto4/"+date+"-CasosConfirmados-totalRegional.csv", index_col='Region')
    return values

# Obtención del fallecimiento etario por fecha:
def get_fallecimiento_etario():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto10/FallecidosEtario.csv", delimiter=',')
    return values


# Función que entrega los CSV con los datos totales por comuna incrementales
def get_Casos_Totales_comunas_incr():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19.csv")
    return values

# Cuidado que no está cualquier día:
# función entrega los CSV con las los casos totales por coomuna. 
def get_Casos_Totales_comunas(date):
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto2/"+date+"-CasosConfirmados.csv")
    return values

# Obtención de casos totales por región: 
def get_Casos_totales_x_region(date):
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto4/"+date+"-CasosConfirmados-totalRegional.csv")
    return values
  
#Obtención de totales nacionales:
def get_total_nacional():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto5/TotalesNacionales.csv")
    return values


#obtención de incidencia:
def get_incidencia():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto6/bulk/data.csv")
    return values

"""## Obtenciones Products"""

# Obtención product6
def get_product6():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto6/bulk/data.csv")
    return values

# Obtención product9_pacientes_UCI_por_grupo_etario
def get_product9_pacientes_UCI_por_grupo_etario():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto9/HospitalizadosUCIEtario.csv")
    return values

# Obtención product9_pacientes_UCI_por_grupo_etario_traspuesto
def get_product9_pacientes_UCI_por_grupo_etario_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto9/HospitalizadosUCIEtario_T.csv")
    return values

# Obtención product10_fallecidos_por_grupo_etario
def get_product10_fallecidos_por_grupo_etario():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto10/FallecidosEtario.csv")
    return values

# Obtención product10_fallecidos_por_grupo_etario_traspuesto
def get_product10_fallecidos_por_grupo_etario_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto10/FallecidosEtario_T.csv")
    return values

# Obtención product13_casos_nuevos_acumulativos
def get_product13_casos_nuevos_acumulativos():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto13/CasosNuevosCumulativo.csv")
    return values

# Obtención product13_casos_nuevos_acumulativos_traspuesto
def get_product13_casos_nuevos_acumulativos_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto13/CasosNuevosCumulativo_T.csv")
    return values

# Obtención product14_fallecidos_acumulativos
def get_product14():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto14/FallecidosCumulativo.csv")
    return values

# Obtención product14_fallecidos_acumulativos_traspuesto
def get_product14_fallecidos_acumulativos_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto14/FallecidosCumulativo_T.csv")
    return values

# Obtención product16_casos_genero_etario
def get_product16_casos_genero_etario():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto16/CasosGeneroEtario.csv")
    return values

# Obtención product16_casos_genero_etario_traspuesto
def get_product16_casos_genero_etario_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto16/CasosGeneroEtario_T.csv")
    return values

# Obtención product16_casos_genero_etario_etapa_clinica
def get_product16_casos_genero_etario_etapa_clinica():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto16/CasosGeneroEtarioEtapaClinica.csv")
    return values


# Obtención product16_casos_genero_etario_etapa_clinica_traspuesto
def get_product16_casos_genero_etario_etapa_clinica_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto16/CasosGeneroEtarioEtapaClinica_t.csv")
    return values


# Obtención product17
def get_product17():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto17/PCREstablecimiento.csv")
    return values

def get_product17_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto17/PCREstablecimiento_T.csv")
    return values

# Obtención product20_camas_criticas_nivel_nacional
def get_product20_camas_criticas_nivel_nacional():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto20/NumeroVentiladores.csv")
    return values

# Obtención product20_camas_criticas_nivel_nacional_traspuesto
def get_product20_camas_criticas_nivel_nacional_traspuesto():
    values = pd.read_csv("https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto20/NumeroVentiladores_T.csv")
    return values

"""#Análisis product9 -- Pacientes UCI por grupo etario.


"""

get_product9_pacientes_UCI_por_grupo_etario()

pacientes_UCI_por_grupo_etario_traspuesto = get_product9_pacientes_UCI_por_grupo_etario_traspuesto()
pacientes_UCI_por_grupo_etario_traspuesto['Fecha'] = pacientes_UCI_por_grupo_etario_traspuesto['Grupo de edad']
del pacientes_UCI_por_grupo_etario_traspuesto['Grupo de edad']
pacientes_UCI_por_grupo_etario_traspuesto

pacientes_UCI_por_grupo_etario_traspuesto = get_product9_pacientes_UCI_por_grupo_etario_traspuesto()
pacientes_UCI_por_grupo_etario_traspuesto['Fecha'] = pacientes_UCI_por_grupo_etario_traspuesto['Grupo de edad']
del pacientes_UCI_por_grupo_etario_traspuesto['Grupo de edad']
pacientes_UCI_por_grupo_etario_traspuesto['Fecha'] = pd.to_datetime(pacientes_UCI_por_grupo_etario_traspuesto['Fecha'])
pacientes_UCI_por_grupo_etario_traspuesto.set_index('Fecha', inplace=True)
pacientes_UCI_por_grupo_etario_traspuesto.resample('D')
pacientes_UCI_por_grupo_etario_traspuesto.head()

pacientes_UCI_por_grupo_etario_traspuesto.describe()

pacientes_UCI_por_grupo_etario_traspuesto.corr()

boxplot_pacientes_UCI_por_grupo_etario_traspuesto = pacientes_UCI_por_grupo_etario_traspuesto.boxplot(column=['<=39', '40-49', '50-59', '60-69', '>=70'])

"""## Evolución diaria"""

pacientes_UCI_por_grupo_etario_traspuesto['<=39'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto['40-49'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto['50-59'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto['60-69'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto['>=70'].plot(figsize=(15, 6))

plt.legend(["<=39 años", "40-49 años", "50-59 años", "60-69 años", ">=70 años"])
plt.show()

"""## Descomposición de datos diarios Pacientes UCI <= 39 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_39 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto['<=39'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_39_diario = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_39, model='additive')
fig_39_diario = decomposition_39_diario.plot()
plt.show()

ad_fuller_result_39_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_39)
print(f'ADF Statistic: {ad_fuller_result_39_diario[0]}')
print(f'p-value: {ad_fuller_result_39_diario[1]}')
pacientes_UCI_por_grupo_etario_traspuesto_39.describe()

"""## Descomposición de datos diarios Pacientes UCI 40-49 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_49 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto['40-49'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_49_diario = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_49, model='additive')
fig_49_diario = decomposition_49_diario.plot()
plt.show()

ad_fuller_result_49_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_49)
print(f'ADF Statistic: {ad_fuller_result_49_diario[0]}')
print(f'p-value: {ad_fuller_result_49_diario[1]}')
pacientes_UCI_por_grupo_etario_traspuesto_49.describe()

"""## Descomposición de datos diarios Pacientes UCI 50-59 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_59 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto['50-59'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_59_diario = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_59, model='additive')
fig_59_diario = decomposition_39_diario.plot()
plt.show()

ad_fuller_result_59_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_59)
print(f'ADF Statistic: {ad_fuller_result_59_diario[0]}')
print(f'p-value: {ad_fuller_result_59_diario[1]}')
pacientes_UCI_por_grupo_etario_traspuesto_59.describe()

"""## Descomposición de datos diarios Pacientes UCI 60-69 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_69 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto['60-69'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_69_diario = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_69, model='additive')
fig_69_diario = decomposition_69_diario.plot()
plt.show()

ad_fuller_result_69_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_69)
print(f'ADF Statistic: {ad_fuller_result_69_diario[0]}')
print(f'p-value: {ad_fuller_result_69_diario[1]}')
pacientes_UCI_por_grupo_etario_traspuesto_69.describe()

"""## Descomposición de datos diarios Pacientes UCI >= 70 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_70 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto['>=70'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_70_diario = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_70, model='additive')
fig_70_diario = decomposition_70_diario.plot()
plt.show()

ad_fuller_result_70_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_70)
print(f'ADF Statistic: {ad_fuller_result_70_diario[0]}')
print(f'p-value: {ad_fuller_result_70_diario[1]}')
pacientes_UCI_por_grupo_etario_traspuesto_70.describe()

"""## Traspaso a de datos a formato semanal"""

pacientes_UCI_por_grupo_etario_traspuesto_2 = get_product9_pacientes_UCI_por_grupo_etario_traspuesto()
pacientes_UCI_por_grupo_etario_traspuesto_2['Fecha'] = pacientes_UCI_por_grupo_etario_traspuesto_2['Grupo de edad']
del pacientes_UCI_por_grupo_etario_traspuesto_2['Grupo de edad']
pacientes_UCI_por_grupo_etario_traspuesto_2['Fecha'] = pd.to_datetime(pacientes_UCI_por_grupo_etario_traspuesto_2['Fecha'])
pacientes_UCI_por_grupo_etario_traspuesto_2.set_index('Fecha', inplace=True)
pacientes_UCI_por_grupo_etario_traspuesto_2 = pacientes_UCI_por_grupo_etario_traspuesto_2.resample('W').sum()
pacientes_UCI_por_grupo_etario_traspuesto_2.head()

"""## Evolución semanal"""

pacientes_UCI_por_grupo_etario_traspuesto_2['<=39'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto_2['40-49'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto_2['50-59'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto_2['60-69'].plot(figsize=(15, 6))
pacientes_UCI_por_grupo_etario_traspuesto_2['>=70'].plot(figsize=(15, 6))

plt.legend(["<=39 años", "40-49 años", "50-59 años", "60-69 años", ">=70 años"])

plt.show()

"""## Descomposición de datos semanales Pacientes UCI <= 39 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_2_39 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto_2['<=39'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_39_semanal = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_2_39, model='additive')
fig = decomposition_39_semanal.plot()
plt.show()

ad_fuller_result_39_semanal = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_2_39)
print(f'ADF Statistic: {ad_fuller_result_39_semanal[0]}')
print(f'p-value: {ad_fuller_result_39_semanal[1]}')

"""## Descomposición de datos semanales Pacientes UCI 40-49 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_2_49 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto_2['40-49'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_49_semanal = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_2_49, model='additive')
fig = decomposition_49_semanal.plot()
plt.show()

ad_fuller_result_49_semanal = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_2_49)
print(f'ADF Statistic: {ad_fuller_result_49_semanal[0]}')
print(f'p-value: {ad_fuller_result_49_semanal[1]}')

"""## Descomposición de datos semanales Pacientes UCI 50-59 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_2_59 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto_2['50-59'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_59_semanal = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_2_59, model='additive')
fig = decomposition_59_semanal.plot()
plt.show()

ad_fuller_result_59_semanal = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_2_59)
print(f'ADF Statistic: {ad_fuller_result_59_semanal[0]}')
print(f'p-value: {ad_fuller_result_59_semanal[1]}')

"""## Descomposición de datos semanales Pacientes UCI 60-69 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_2_69 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto_2['60-69'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_69_semanal = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_2_69, model='additive')
fig = decomposition_69_semanal.plot()
plt.show()

ad_fuller_result_69_semanal = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_2_69)
print(f'ADF Statistic: {ad_fuller_result_69_semanal[0]}')
print(f'p-value: {ad_fuller_result_69_semanal[1]}')

"""## Descomposición de datos semanales Pacientes UCI <=70 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
pacientes_UCI_por_grupo_etario_traspuesto_2_70 = pd.DataFrame(data=pacientes_UCI_por_grupo_etario_traspuesto_2['>=70'].to_numpy(), index=pacientes_UCI_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_70_semanal = sm.tsa.seasonal_decompose(pacientes_UCI_por_grupo_etario_traspuesto_2_70, model='additive')
fig = decomposition_70_semanal.plot()
plt.show()

ad_fuller_result_70_semanal = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_2_70)
print(f'ADF Statistic: {ad_fuller_result_70_semanal[0]}')
print(f'p-value: {ad_fuller_result_70_semanal[1]}')
print(pacientes_UCI_por_grupo_etario_traspuesto_2_70.describe())

a = np.array(pacientes_UCI_por_grupo_etario_traspuesto_2_70.describe())
print(a)





"""#Análisis product10 -- Fallecidos por grupo etario."""

get_product10_fallecidos_por_grupo_etario_traspuesto()

fallecidos_por_grupo_etario_traspuesto = get_product10_fallecidos_por_grupo_etario_traspuesto()
fallecidos_por_grupo_etario_traspuesto['Fecha'] = fallecidos_por_grupo_etario_traspuesto['Grupo de edad']
del fallecidos_por_grupo_etario_traspuesto['Grupo de edad']
fallecidos_por_grupo_etario_traspuesto

fallecidos_por_grupo_etario_traspuesto = get_product10_fallecidos_por_grupo_etario_traspuesto()
fallecidos_por_grupo_etario_traspuesto['Fecha'] = fallecidos_por_grupo_etario_traspuesto['Grupo de edad']
del fallecidos_por_grupo_etario_traspuesto['Grupo de edad']
fallecidos_por_grupo_etario_traspuesto['Fecha'] = pd.to_datetime(fallecidos_por_grupo_etario_traspuesto['Fecha'])
fallecidos_por_grupo_etario_traspuesto.set_index('Fecha', inplace=True)
fallecidos_por_grupo_etario_traspuesto.resample('D')
fallecidos_por_grupo_etario_traspuesto.head()

fallecidos_por_grupo_etario_traspuesto.describe()

fallecidos_por_grupo_etario_traspuesto.corr()

boxplot_fallecidos_por_grupo_etario_traspuesto = fallecidos_por_grupo_etario_traspuesto.boxplot(column=['<=39', '40-49', '50-59', '60-69', '70-79', '80-89', '>=90'])



"""## Evolución diaria"""

fallecidos_por_grupo_etario_traspuesto['<=39'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto['40-49'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto['50-59'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto['60-69'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto['70-79'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto['80-89'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto['>=90'].plot(figsize=(15, 6))

plt.legend(["<=39 años", "40-49 años", "50-59 años", "60-69 años", "70-79 años", "80-89 años", ">=90 años"])
plt.show()

"""## Descomposición de datos diarios fallecidos <= 39 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_39 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['<=39'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_39_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_39, model='additive')
fig_39_diario = decomposition_39_diario.plot()
plt.show()

ad_fuller_result_39_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_39)
print(f'ADF Statistic: {ad_fuller_result_39_diario[0]}')
print(f'p-value: {ad_fuller_result_39_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_39.describe()

"""## Descomposición de datos diarios fallecidos 40-49 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_49 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['40-49'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_49_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_49, model='additive')
fig_49_diario = decomposition_49_diario.plot()
plt.show()

ad_fuller_result_49_diario = adfuller(pacientes_UCI_por_grupo_etario_traspuesto_49)
print(f'ADF Statistic: {ad_fuller_result_49_diario[0]}')
print(f'p-value: {ad_fuller_result_49_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_49.describe()

"""## Descomposición de datos diarios fallecidos 50-59 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_59 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['50-59'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_59_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_59, model='additive')
fig_39_diario = decomposition_59_diario.plot()
plt.show()

ad_fuller_result_59_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_59)
print(f'ADF Statistic: {ad_fuller_result_59_diario[0]}')
print(f'p-value: {ad_fuller_result_59_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_59.describe()

"""## Descomposición de datos diarios fallecidos 60-69 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_69 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['60-69'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_69_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_69, model='additive')
fig_69_diario = decomposition_69_diario.plot()
plt.show()

ad_fuller_result_69_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_69)
print(f'ADF Statistic: {ad_fuller_result_69_diario[0]}')
print(f'p-value: {ad_fuller_result_69_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_69.describe()

"""## Descomposición de datos diarios fallecidos 70-79 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_79 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['70-79'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_79_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_79, model='additive')
fig_39_diario = decomposition_79_diario.plot()
plt.show()

ad_fuller_result_79_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_79)
print(f'ADF Statistic: {ad_fuller_result_79_diario[0]}')
print(f'p-value: {ad_fuller_result_79_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_79.describe()

"""## Descomposición de datos diarios fallecidos 80-89 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_89 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['80-89'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_89_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_89, model='additive')
fig_89_diario = decomposition_89_diario.plot()
plt.show()

ad_fuller_result_89_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_89)
print(f'ADF Statistic: {ad_fuller_result_89_diario[0]}')
print(f'p-value: {ad_fuller_result_89_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_89.describe()

"""## Descomposición de datos diarios fallecidos >=90 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_90 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto['>=90'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto.index.to_numpy())[0] 
decomposition_90_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_90, model='additive')
fig_90_diario = decomposition_90_diario.plot()
plt.show()

ad_fuller_result_90_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_90)
print(f'ADF Statistic: {ad_fuller_result_90_diario[0]}')
print(f'p-value: {ad_fuller_result_90_diario[1]}')
fallecidos_por_grupo_etario_traspuesto_90.describe()



fallecidos_por_grupo_etario_traspuesto_2 = get_product10_fallecidos_por_grupo_etario_traspuesto()
fallecidos_por_grupo_etario_traspuesto_2['Fecha'] = fallecidos_por_grupo_etario_traspuesto_2['Grupo de edad']
del fallecidos_por_grupo_etario_traspuesto_2['Grupo de edad']
fallecidos_por_grupo_etario_traspuesto_2['Fecha'] = pd.to_datetime(fallecidos_por_grupo_etario_traspuesto_2['Fecha'])
fallecidos_por_grupo_etario_traspuesto_2.set_index('Fecha', inplace=True)
fallecidos_por_grupo_etario_traspuesto_2 = fallecidos_por_grupo_etario_traspuesto_2.resample('W').sum()
fallecidos_por_grupo_etario_traspuesto_2.head()

"""## Evolución semanal"""

fallecidos_por_grupo_etario_traspuesto_2['<=39'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto_2['40-49'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto_2['50-59'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto_2['60-69'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto_2['70-79'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto_2['80-89'].plot(figsize=(15, 6))
fallecidos_por_grupo_etario_traspuesto_2['>=90'].plot(figsize=(15, 6))

plt.legend(["<=39 años", "40-49 años", "50-59 años", "60-69 años", "70-79 años", "80-89 años", ">=90 años"])
plt.show()

"""## Descomposición de datos semanales fallecidos <= 39 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_39 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['<=39'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_39_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_39, model='additive')
fig_2_39_diario = decomposition_2_39_diario.plot()
plt.show()

ad_fuller_result_2_39_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_39)
print(f'ADF Statistic: {ad_fuller_result_2_39_diario[0]}')
print(f'p-value: {ad_fuller_result_2_39_diario[1]}')

"""## Descomposición de datos semanales fallecidos 40-49 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_49 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['40-49'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_49_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_49, model='additive')
fig_2_49_diario = decomposition_2_49_diario.plot()
plt.show()

ad_fuller_result_2_49_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_49)
print(f'ADF Statistic: {ad_fuller_result_2_49_diario[0]}')
print(f'p-value: {ad_fuller_result_2_49_diario[1]}')

"""## Descomposición de datos semanales fallecidos 50-59 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_59 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['50-59'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_59_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_59, model='additive')
fig_2_59_diario = decomposition_2_59_diario.plot()
plt.show()

ad_fuller_result_2_59_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_59)
print(f'ADF Statistic: {ad_fuller_result_2_59_diario[0]}')
print(f'p-value: {ad_fuller_result_2_59_diario[1]}')

"""## Descomposición de datos semanales fallecidos 60-69 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_69 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['60-69'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_69_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_69, model='additive')
fig_2_69_diario = decomposition_2_69_diario.plot()
plt.show()

ad_fuller_result_2_69_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_69)
print(f'ADF Statistic: {ad_fuller_result_2_69_diario[0]}')
print(f'p-value: {ad_fuller_result_2_69_diario[1]}')

"""## Descomposición de datos semanales fallecidos 70-79 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_79 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['70-79'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_79_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_79, model='additive')
fig_2_79_diario = decomposition_2_79_diario.plot()
plt.show()

ad_fuller_result_2_79_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_79)
print(f'ADF Statistic: {ad_fuller_result_2_79_diario[0]}')
print(f'p-value: {ad_fuller_result_2_79_diario[1]}')

"""## Descomposición de datos semanales fallecidos 80-89 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_89 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['80-89'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_89_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_89, model='additive')
fig_2_89_diario = decomposition_2_89_diario.plot()
plt.show()

ad_fuller_result_2_89_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_89)
print(f'ADF Statistic: {ad_fuller_result_2_89_diario[0]}')
print(f'p-value: {ad_fuller_result_2_89_diario[1]}')

"""## Descomposición de datos semanales fallecidos >=90 años"""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
fallecidos_por_grupo_etario_traspuesto_2_90 = pd.DataFrame(data=fallecidos_por_grupo_etario_traspuesto_2['>=90'].to_numpy(), index=fallecidos_por_grupo_etario_traspuesto_2.index.to_numpy())[0] 
decomposition_2_90_diario = sm.tsa.seasonal_decompose(fallecidos_por_grupo_etario_traspuesto_2_90, model='additive')
fig_2_90_diario = decomposition_2_90_diario.plot()
plt.show()

ad_fuller_result_2_90_diario = adfuller(fallecidos_por_grupo_etario_traspuesto_2_90)
print(f'ADF Statistic: {ad_fuller_result_2_90_diario[0]}')
print(f'p-value: {ad_fuller_result_2_90_diario[1]}')

"""#Análisis product20 -- Camas críticas nivel nacional"""

get_product20_camas_criticas_nivel_nacional_traspuesto()

camas_criticas_nivel_nacional_traspuesto = get_product20_camas_criticas_nivel_nacional_traspuesto()
camas_criticas_nivel_nacional_traspuesto['Fecha'] = camas_criticas_nivel_nacional_traspuesto['Ventiladores']
del camas_criticas_nivel_nacional_traspuesto['Ventiladores']
camas_criticas_nivel_nacional_traspuesto

camas_criticas_nivel_nacional_traspuesto = get_product20_camas_criticas_nivel_nacional_traspuesto()
camas_criticas_nivel_nacional_traspuesto['Fecha'] = camas_criticas_nivel_nacional_traspuesto['Ventiladores']
del camas_criticas_nivel_nacional_traspuesto['Ventiladores']
camas_criticas_nivel_nacional_traspuesto['Fecha'] = pd.to_datetime(camas_criticas_nivel_nacional_traspuesto['Fecha'])
camas_criticas_nivel_nacional_traspuesto.set_index('Fecha', inplace=True)
camas_criticas_nivel_nacional_traspuesto.resample('D')
camas_criticas_nivel_nacional_traspuesto.head()

camas_criticas_nivel_nacional_traspuesto.describe()

camas_criticas_nivel_nacional_traspuesto.corr()

boxplot_camas_criticas_nivel_nacional_traspuesto = camas_criticas_nivel_nacional_traspuesto.boxplot(column=['total', 'disponibles', 'ocupados'])

"""## Evolución diaria"""

camas_criticas_nivel_nacional_traspuesto['total'].plot(figsize=(15, 6))
camas_criticas_nivel_nacional_traspuesto['disponibles'].plot(figsize=(15, 6))
camas_criticas_nivel_nacional_traspuesto['ocupados'].plot(figsize=(15, 6))

plt.legend(["totales", "disponibles", "ocupados"])
plt.show()

"""## Descomposición de datos diarios camas criticas totales."""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
camas_criticas_nivel_nacional_traspuesto_total = pd.DataFrame(data=camas_criticas_nivel_nacional_traspuesto['total'].to_numpy(), index=camas_criticas_nivel_nacional_traspuesto.index.to_numpy())[0] 
decomposition_total_diario = sm.tsa.seasonal_decompose(camas_criticas_nivel_nacional_traspuesto_total, model='additive')
fig_total_diario = decomposition_total_diario.plot()
plt.show()

ad_fuller_result_total_diario = adfuller(camas_criticas_nivel_nacional_traspuesto_total)
print(f'ADF Statistic: {ad_fuller_result_total_diario[0]}')
print(f'p-value: {ad_fuller_result_total_diario[1]}')

"""## Descomposición de datos diarios camas criticas disponibles."""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
camas_criticas_nivel_nacional_traspuesto_disponibles = pd.DataFrame(data=camas_criticas_nivel_nacional_traspuesto['disponibles'].to_numpy(), index=camas_criticas_nivel_nacional_traspuesto.index.to_numpy())[0] 
decomposition_disponibles_diario = sm.tsa.seasonal_decompose(camas_criticas_nivel_nacional_traspuesto_disponibles, model='additive')
fig_disponibles_diario = decomposition_disponibles_diario.plot()
plt.show()

ad_fuller_result_disponibles_diario = adfuller(camas_criticas_nivel_nacional_traspuesto_disponibles)
print(f'ADF Statistic: {ad_fuller_result_disponibles_diario[0]}')
print(f'p-value: {ad_fuller_result_disponibles_diario[1]}')

"""## Descomposición de datos diarios camas criticas ocupadas."""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
camas_criticas_nivel_nacional_traspuesto_ocupados = pd.DataFrame(data=camas_criticas_nivel_nacional_traspuesto['ocupados'].to_numpy(), index=camas_criticas_nivel_nacional_traspuesto.index.to_numpy())[0] 
decomposition_ocupados_diario = sm.tsa.seasonal_decompose(camas_criticas_nivel_nacional_traspuesto_ocupados, model='additive')
fig_ocupados_diario = decomposition_ocupados_diario.plot()
plt.show()

ad_fuller_result_ocupados_diario = adfuller(camas_criticas_nivel_nacional_traspuesto_ocupados)
print(f'ADF Statistic: {ad_fuller_result_ocupados_diario[0]}')
print(f'p-value: {ad_fuller_result_ocupados_diario[1]}')



camas_criticas_nivel_nacional_traspuesto_semanal = get_product20_camas_criticas_nivel_nacional_traspuesto()
camas_criticas_nivel_nacional_traspuesto_semanal['Fecha'] = camas_criticas_nivel_nacional_traspuesto_semanal['Ventiladores']
del camas_criticas_nivel_nacional_traspuesto_semanal['Ventiladores']
camas_criticas_nivel_nacional_traspuesto_semanal['Fecha'] = pd.to_datetime(camas_criticas_nivel_nacional_traspuesto_semanal['Fecha'])
camas_criticas_nivel_nacional_traspuesto_semanal.set_index('Fecha', inplace=True)
camas_criticas_nivel_nacional_traspuesto_semanal = camas_criticas_nivel_nacional_traspuesto_semanal.resample('W').sum()
camas_criticas_nivel_nacional_traspuesto_semanal.head()

"""## Evolución semanal"""

camas_criticas_nivel_nacional_traspuesto_semanal['total'].plot(figsize=(15, 6))
camas_criticas_nivel_nacional_traspuesto_semanal['disponibles'].plot(figsize=(15, 6))
camas_criticas_nivel_nacional_traspuesto_semanal['ocupados'].plot(figsize=(15, 6))

plt.legend(["totales", "disponibles", "ocupados"])
plt.show()

"""## Descomposición de datos semanal camas criticas total."""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
camas_criticas_nivel_nacional_traspuesto_total_semanal = pd.DataFrame(data=camas_criticas_nivel_nacional_traspuesto_semanal['total'].to_numpy(), index=camas_criticas_nivel_nacional_traspuesto_semanal.index.to_numpy())[0] 
decomposition_total_semanal = sm.tsa.seasonal_decompose(camas_criticas_nivel_nacional_traspuesto_total_semanal, model='additive')
fig_total_semanal = decomposition_total_semanal.plot()
plt.show()

ad_fuller_result_total_semanal = adfuller(camas_criticas_nivel_nacional_traspuesto_total_semanal)
print(f'ADF Statistic: {ad_fuller_result_total_semanal[0]}')
print(f'p-value: {ad_fuller_result_total_semanal[1]}')

"""## Descomposición de datos semanal camas criticas disponibles."""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
camas_criticas_nivel_nacional_traspuesto_disponible_semanal = pd.DataFrame(data=camas_criticas_nivel_nacional_traspuesto_semanal['disponibles'].to_numpy(), index=camas_criticas_nivel_nacional_traspuesto_semanal.index.to_numpy())[0] 
decomposition_disponible_semanal = sm.tsa.seasonal_decompose(camas_criticas_nivel_nacional_traspuesto_disponible_semanal, model='additive')
fig_disponible_semanal = decomposition_disponible_semanal.plot()
plt.show()

ad_fuller_result_disponible_semanal = adfuller(camas_criticas_nivel_nacional_traspuesto_disponible_semanal)
print(f'ADF Statistic: {ad_fuller_result_disponible_semanal[0]}')
print(f'p-value: {ad_fuller_result_disponible_semanal[1]}')

"""## Descomposición de datos semanal camas criticas ocupadas."""

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
camas_criticas_nivel_nacional_traspuesto_ocupados_semanal = pd.DataFrame(data=camas_criticas_nivel_nacional_traspuesto_semanal['ocupados'].to_numpy(), index=camas_criticas_nivel_nacional_traspuesto_semanal.index.to_numpy())[0] 
decomposition_ocupados_semanal = sm.tsa.seasonal_decompose(camas_criticas_nivel_nacional_traspuesto_ocupados_semanal, model='additive')
fig_ocupados_semanal = decomposition_ocupados_semanal.plot()
plt.show()

ad_fuller_result_ocupados_semanal = adfuller(camas_criticas_nivel_nacional_traspuesto_ocupados_semanal)
print(f'ADF Statistic: {ad_fuller_result_ocupados_semanal[0]}')
print(f'p-value: {ad_fuller_result_ocupados_semanal[1]}')







































